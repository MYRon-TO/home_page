# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      # target: final
    # restart: always
    ports:
      - 3000:3000
    environment:
        MYSQL_HOST: db
        MYSQL_PORT: 3306
    depends_on:
      - db
    networks:
        - yuru-network
    # command: tail -f /dev/null
    command: /bin/bash -c "./init_db && ./server"

  db:
    image: mysql:latest
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=1243
      - MYSQL_DATABASE=yuru
      - MYSQL_USER=Liz
      - MYSQL_PASSWORD=1243
      # - MYSQL_USER=Liz
      # - MYSQL_PASSWORD=#ff0000Berry
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - 3306:3306
    expose:
        - 3306
    networks:
        - yuru-network
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0

volumes:
  db-data:
networks:
    yuru-network:
        driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

